declare
fun {Infix Tree}
   case Tree
   of leaf then nil
   [] btree(K left:L right:R) then
      {Append {Append {Infix L} [K]} {Infix R}}
   end
end

declare
fun {Infix Tree}
   local Helper in
      fun {Helper Trees}
	 case Trees
	 of nil then nil
	 [] T|Ts then
	    case T
	    of leaf then {Helper Ts}
	    [] btree(K left:L right:R) then {Helper L|K|R|Ts}
	    [] K then K | {Helper Ts}
	    end
	 end
      end
      {Helper [Tree]}
   end
end

{Browse {Infix
	 btree(4
	       left:btree(2
			  left:btree(1 left:leaf right:leaf)
			  right:btree(3 left:leaf right:leaf))
	       right:btree(5 left:leaf right:leaf))}}

{Browse {Append [1] nil}}


declare
fun {FromTreeToList Tree}
   local Helper in
      fun {Helper Trees}
	 case Trees
	 of nil then nil
	 [] T|Ts then
	    case T
	    of leaf then {Helper Ts}
	    [] btree(K left:L right:R) then {Helper L|K|R|Ts}
	    [] K then K | {Helper Ts}
	    end
	 end
      end
      {Helper [Tree]}
   end
end

declare
FromTreeToList=Infix

declare
fun {FromListToTree L}
   local InsertTree Helper in
      fun {InsertTree Value Tree}
	 case Tree
	 of leaf then btree(Value left:leaf right:leaf)
	 [] btree(V left:L right:R) then
	    if Value==V then Tree
	    elseif Value<V then btree(V left:{InsertTree Value L} right:R)
	    else btree(V left:L right:{InsertTree Value R})
	    end
	 end
      end
      fun {Helper L Tree}
	 case L
	 of nil then Tree
	 [] H|T then {Helper T {InsertTree H Tree}}
	 end
      end
      {Helper L leaf}
   end
end

declare
List=[42 24 12]

{Browse {FromListToTree [1 2]}}
{Browse {FromListToTree List}}

declare
Tree=btree(42
	   left:btree(24
		      left:btree(12 left:leaf right: leaf)
		      right:leaf)
	   right:leaf)

{Browse {FromTreeToList Tree}}declare
T = tree(key:horse value:cheval
              left:tree(key:dog value:chien
                            left:tree(key:cat value:chat left:leaf right:leaf)
                            right:tree(key:elephant value:elephant left:leaf right:leaf))
              right:tree(key:mouse value:souris
                               left:tree(key:monkey value:singe left:leaf right:leaf)
						 right:tree(key:tiger value:tigre left:leaf right:leaf)))

							  {Browse {Lookup mouse}}

declare
T = tree(key:horse value:cheval
              left:tree(key:dog value:chien
                            left:tree(key:cat value:chat left:leaf right:leaf)
                            right:tree(key:elephant value:elephant left:leaf right:leaf))
              right:tree(key:mouse value:souris
                               left:tree(key:monkey value:singe left:leaf right:leaf)
						 right:tree(key:tiger value:tigre left:leaf right:leaf)))

T2 = tree(key:horse value:cheval
              left:tree(key:dog value:chien
                            left:tree(key:cat value:chat left:leaf right:leaf)
                            right:tree(key:elephant value:elephant left:leaf right:leaf))
              right:tree(key:mouse value:souris
                               left:tree(key:monkey value:singe left:leaf right:leaf)
                               right:tree(key:tiger value:tigre left:leaf right:leaf)))
fun {Lookup K T}
   case T of leaf then notfound
   [] tree(key:X value:V left:T1 right:T2) andthen X==K then found(V)
   [] tree(key:X value:V left:T1 right:T2) andthen X<K then {Lookup K T2}
   [] tree(key:X value:V left:T1 right:T2) andthen X>K then {Lookup K T1}
   end
end
fun {Insert K W T}
   case T of leaf then tree(key:K value:W left:leaf right:leaf)
   [] tree(key:X value:V left:T1 right:T2) andthen X==K then
	  tree(key:X value:W left:T1 right:T2)
   [] tree(key:X value:V left:T1 right:T2) andthen X<K then
	  tree(key:X value:V left:T1 right:{Insert K W T2})
   [] tree(key:X value:V left:T1 right:T2) andthen X>K then
	  tree(key:X value:V left:{Insert K W T1} right:T2)
   end
end


%{Browse {Lookup rabbit T}}
%{Browse {Lookup elephant {Insert elephant mouche T}}}
{Browse {Lookup elephant {Insert fly mouche T}}}