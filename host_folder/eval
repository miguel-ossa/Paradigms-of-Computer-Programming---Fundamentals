declare Eval 

fun {Eval L}
   local C Z NewStack IsEmpty Push Pop in
	  C={NewCell nil}
	  Z={NewCell nil}

	  fun {NewStack} nil end
	  fun {IsEmpty S} S==nil end
	  proc {Push S X} S:=X|@C end
	  fun {Pop S}
		 local Q in
			case @S
			of H|T then
			   Q=@S.1
			   S:=@S.2
			   Q
			[] nil then
			   nil 
			end
		end
	  end

	  C:={NewStack}
	  Z:={NewStack}
	  for X in L do
		 case X of '+' then
			Z:=@C.1+@C.2.1
			C:=@Z|@C.2.2
		 [] '*' then
			Z:=@C.1*@C.2.1
			C:=@Z|@C.2.2
		 [] '/' then
			Z:=@C.2.1 div @C.1
			C:=@Z|@C.2.2
		 [] '-' then
			Z:=@C.2.1-@C.1
			C:=@Z|@C.2.2
		 else
			{Push C X}
		 end
	  end
	  
	  @C.1
   end
end


%{Browse {Eval2 [2 3 '+' 4 '*' 10 '/']}}
%{Browse {Eval2 [2 1 '+' 3 '*']}}
%{Browse {Eval2 [42]}}
%{Browse {Eval2 [1 5 '-' 3 '/']}}
%{Browse {Eval2 [13 45 '+' 89 17 '-' '*']}}
{Browse {Eval [10 10 '+' 10 '/' 32 22 '+' '*']}}